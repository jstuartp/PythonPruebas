#!/usr/bin/env seiscomp-python
# -*- coding: utf-8 -*-
import glob

from obspy.clients.fdsn import Client
from obspy import read, UTCDateTime
import sys
import traceback
import datetime
import os
import pymysql
from seiscomp import core, client, io, math, logging
from seiscomp import client, datamodel
from seiscomp.client import Protocol
from time import strftime


#Se crea el objeto cliente FDSN para obtener datos y el inventario
host = ("http://localhost:8080")  # SEISCOMP servidor Virtual
#host = ("http://localhost:8080")  # SEISCOMP computadora local
myClient = Client(host)
total = myClient.get_stations()
networks = myClient.get_stations(level="network")
rutaLog ="/home/lis/waves/corta/cortaLog.log"     #archivo de log cortaWaves
rutaLogPGA ="/home/lis/waves/corta/PGALog.log"     #archivo de log PGA
rutaPGA ="/home/lis/waves/corta/PGAData.log"     #archivo de procesamiento PGA
rutaRaiz="/home/lis/waves/corta/"



class EventListener(client.Application):

    def __init__(self, argc, argv):
        client.Application.__init__(self, argc, argv)
        self.setMessagingEnabled(True)
        self.setDatabaseEnabled(False, False)
        self.setPrimaryMessagingGroup(Protocol.LISTENER_GROUP)
        self.addMessagingSubscription("EVENT")
        self.setLoggingToStdErr(True)

    def doSomethingWithEvent(self, obj):

        #corta las waveform
        self.cortaWaves(obj)
        #print(str(core.Time.GMT()))
        #print("TERMINE DE CORTAR LAS ONDAS")
        archivo = open(rutaLog, "a")
        archivo.write(str(core.Time.GMT()))
        archivo.write("--TERMINA DE ESCRIBIR ONDAS--\n" )
        archivo.close()
        #calcula el pga
        bd=self.calculoPGA(obj)
        #print(str(core.Time.GMT()))
        #print("TERMINE DE CALCULAR PGA")
        archivo = open(rutaLogPGA, "a")
        archivo.write(str(core.Time.GMT()))
        archivo.write("--TERMINA DE CALCULAR PGA--\n" )
        archivo.close()
        #print(bd)
        #guarda en la base
        self.conection(bd)
        archivo = open(rutaLogPGA, "a")
        archivo.write(str(core.Time.GMT()))
        archivo.write("--TERMINA DE GUARDAR EN LA BASE--\n" )
        archivo.close()
        #print(str(core.Time.GMT()))
        #print("TERMINE DE GUARDAR EN BD")


    def cortaWaves(self, obj):
        now = core.Time.GMT()
        contador = UTCDateTime(now)
        event = datamodel.Event.Cast(obj)
        fechaEvento = str(event.creationInfo().creationTime())
        fechaEvento = fechaEvento.replace(" ", "")
        fechaEvento = fechaEvento.replace(":", "_")
        fechaEvento = fechaEvento.replace(".", "_")
        rutaWaves = rutaRaiz + event.publicID() + fechaEvento + "/"

        try:
            os.stat(rutaWaves)
        except:
            os.mkdir(rutaWaves)

        try:
            archivo = open(rutaLog, "a")
            archivo.write("\n--EXITO--PROCESANDO NUEVO EVENTO %s\n" % event.publicID())
            archivo.write("--EXITO--Fecha del evento %s\n" % event.creationInfo().creationTime())
            archivo.write("--EXITO--Fecha de procesamiento %s\n" % str(now))
            archivo.close()
            tiempo = event.creationInfo().creationTime()

            # Substract 5 minutes for the start time
            # start = now - core.TimeSpan(300, 0)
            inicio = tiempo - core.TimeSpan(300, 0)  # resta 5 minutos a la hora fija

            fin = tiempo + core.TimeSpan(300, 0)  # suma 5 minutos a la hora fija
            utcfin = UTCDateTime(fin)
            utcinicio = UTCDateTime(inicio)
            utctiempo = UTCDateTime(tiempo)
            lista = []

            for n in range(len(networks)):
                # print(total[n].code)
                for s in range(len(total.networks[n].stations)):
                    # print(total.networks[n].stations[s].code)

                    try:
                        st = myClient.get_waveforms(total[n].code, total.networks[n].stations[s].code, "**", "HN*",
                                                    utcinicio, utcfin, attach_response=True)
                        # instucciones de log
                        #print(str(core.Time.GMT()))
                        archivo = open(rutaLog, "a")
                        archivo.write(str(core.Time.GMT()))
                        archivo.write("--EXITO--Pidiendo Stream para %s\n" % total.networks[n].stations[s].code)
                        archivo.close()
                        # fin de log
                    except Exception as err:
                        archivo = open(rutaLog, "a")
                        archivo.write(str(core.Time.GMT()))
                        archivo.write(
                            "--FALLO EN LECTURA--No data for station  %s\n" % total.networks[n].stations[s].code)
                        # archivo.write(f"\nDescripcion del error:  {err.encode('utf-8')}")
                        archivo.close()
                        # print(f"FALLO TRY 1 Descripcion del error: {err}")


                    else:  # de existir datos continua con el calculo
                        # st.merge()
                        # copia para quitar respuesta
                        # strNew = st.copy()
                        try:
                            st.merge()
                            # copia para quitar respuesta
                            strNew = st.copy()
                            rutaArchivo = rutaWaves + utctiempo.strftime("%m-%d-%Y-%H-%M-%S") + "_" + total[n].code+"_"+\
                                          total.networks[n].stations[s].code + ".mseed"
                            # guardar el stream en archivo mseed
                            strNew.write(rutaArchivo, format="MSEED")

                        except Exception as err:
                            # print("Error en lectura de datos para la estación %s " % total.networks[n].stations[s].code)
                            archivo = open(rutaLog, "a")
                            archivo.write(str(core.Time.GMT()))
                            archivo.write(
                                "--FALLO EN ESCRITURA-- No data written for station %s \n" % total.networks[n].stations[
                                    s].code)
                            # archivo.write(f"\nDescripción del error:  {err}")
                            archivo.close()
                            # print(f"FALLO TRY 2 Descripcion del error: {err}")
        except Exception as err:
            archivo = open(rutaLog, "a")
            archivo.write(str(core.Time.GMT()))
            archivo.write("--FALLO FATAL-- Something is broken\n")
            archivo.write(f"Error detail:  {err}\n")
            archivo.close()

        archivo = open(rutaLog, "a")
        archivo.write(str(core.Time.GMT()))
        archivo.write("--TERMINE TODO EL PROCESO--\n")
        # archivo.write( "\nDescripción del error:  %s" % str(err.__str__()))
        archivo.close()
        contadorfin = UTCDateTime(core.Time.GMT())
        contador = contadorfin - contador
        print("Tiempo Cortando Waves (s): %s" % contador)
        print("TERMINE DE GUARDAR WAVES")


    def calculoPGA(self, obj):  # calculoPGA(obj): nombre con parametro
        now = core.Time.GMT()
        contador = UTCDateTime(now)
        event = datamodel.Event.Cast(obj)
        fechaEvento = str(event.creationInfo().creationTime())
        fechaEvento = fechaEvento.replace(" ", "")
        fechaEvento = fechaEvento.replace(":", "_")
        fechaEvento = fechaEvento.replace(".", "_")
        rutaWaves = rutaRaiz + event.publicID() + fechaEvento + "/"
        tiempo = event.creationInfo().creationTime()
        files = os.listdir(rutaWaves)

        # tiempo= "2024-06-01 20:33:39.584" #para prueba local
        utctiempo = UTCDateTime(tiempo)
        # Substract 5 minutes for the start time
        # start = now - core.TimeSpan(300, 0)
        inicio = tiempo - core.TimeSpan(300, 0)  # resta 5 minutos a la hora fija
        fin = tiempo + core.TimeSpan(300, 0)  # suma 5 minutos a la hora fija
        utcfin = UTCDateTime(fin)
        utcinicio = UTCDateTime(inicio)


        matriz = []

        archivo = open(rutaLogPGA, "a")
        # archivo.write("\n\n\n--EXITO--CALCULANDO PGA PARA NUEVO EVENTO UCR_lis2024kthc") #local
        # archivo.write("\n--EXITO--Fecha del evento 2024-06-0120_33_39_584" ) #local
        archivo.write("\n\n\n--EXITO--CALCULANDO PGA PARA NUEVO EVENTO %s" % event.publicID())
        archivo.write("\n--EXITO--Fecha del evento %s" % event.creationInfo().creationTime())
        archivo.write("\n--EXITO--Fecha de procesamiento %s\n" % str(now))
        archivo.close()
        print("PROCESANDO EVENTO")

        # recorriendo lista de networks para solicitar datos con el código de cada estación
        for file in files:
            rutaCompleta= os.path.join(rutaWaves,file)

            if os.path.isfile(rutaCompleta):
                datos = []
                nombreFile = file

                redes= nombreFile.split("_")

                estacion=redes[2].split(".")


                try:
                    # falla si no hay datos para la estacion en el tiempo dado

                    inventory = myClient.get_stations(network=redes[1],
                                                      station=estacion[0],
                                                      level="RESP")

                    # st = client.get_waveforms(total[n].code, total.networks[n].stations[s].code, "**", "HN*", inicio, fin,
                    #  attach_response=True)
                    #print(inventory)

                    st = read(rutaCompleta, format="mseed")


                    archivo = open(rutaLogPGA, "a")
                    archivo.write(str(core.Time.GMT()))
                    archivo.write("--EXITO--Data read for station %s \n" % estacion[0])
                    archivo.close()



                except Exception as err:
                    archivo = open(rutaLogPGA, "a")
                    archivo.write(str(core.Time.GMT()))
                    archivo.write(
                        "--FALLO EN LECTURA--No data or file for station  %s \n" % estacion[0])
                    # archivo.write(f"\nDescripcion del error:  {err.encode('utf-8')}")
                    archivo.close()
                    # print(f"FALLO TRY 1 Descripcion del error: {err}")
                else:  # de existir datos continua con el calculo

                    st.merge()
                    #print(st)
                    # copia para quitar respuesta
                    strNew = st.copy()
                    # string con la ruta del archivo para referenciar en base de datos
                    rutaArchivo = rutaWaves + utctiempo.strftime("%m-%d-%Y_%H:%M:%S") + "_" + \
                                  estacion[0] + ".mseed"

                    # Iteracion para filtrar e imprimir el resultado del pga
                    chan = []

                    for trx in strNew:
                        try:
                            trx.detrend("demean")
                            trx.detrend("linear")
                            trx.taper(max_percentage=0.05, type="hann")
                            trx.filter("bandpass", freqmin=0.05, freqmax=25, corners=2)  # Filtro estandar para el LIS
                            trx = trx.remove_response(inventory, output="ACC")
                            absoluto = abs(trx.data)
                            maximo = max(absoluto)
                            archivo = open(rutaLogPGA, "a")
                            archivo.write(str(core.Time.GMT()))
                            archivo.write(
                                "--DATOS--Processing Station  %s \n" % trx.stats.station)
                            archivo.write(
                                "--DATOS----Processing Channel  %s \n" % trx.stats.channel)
                            archivo.write(
                                "--DATOS----PGA;  %s \n" % str(maximo))
                            archivo.close()

                        except:
                            st_umask = trx.split()
                            a = []
                            for tr1 in st_umask:
                                tr1.detrend("demean")
                                tr1.detrend("linear")
                                tr1.taper(max_percentage=0.05, type="hann")
                                tr1.filter("bandpass", freqmin=0.1, freqmax=10, corners=2)
                                tr1 = tr1.remove_response(inventory, output="ACC")
                                a.append(abs(max(tr1.data)))
                                maximo = max(a)
                                archivo = open(rutaLogPGA, "a")
                                archivo.write(str(core.Time.GMT()))
                                archivo.write(
                                    "--DATOS--Processing Station  %s \n" % trx.stats.station)
                                archivo.write(
                                    "--DATOS----Processing Channel  %s \n" % trx.stats.channel)
                                archivo.write(
                                    "--DATOS----PGA;  %s \n" % str(maximo))
                                archivo.close()

                        chan.append(maximo)

                    # print(trx.stats.station, trx.stats.location, trx.stats.channel)
                    # print(str(maximo))

                    try:
                        coord = inventory.get_coordinates(
                            redes[1] + "." + estacion[0] + ".00.HNZ")
                    except:
                        try:
                            coord = inventory.get_coordinates(
                                redes[1] + "." + estacion[0] + ".11.HNZ")
                        except:
                            coord = inventory.get_coordinates(
                                redes[1] + "." + estacion[0] + "..HNZ")
                    datos.append(utctiempo.strftime("%d/%m/%Y %H:%M:%S"))
                    datos.append(str(now))
                    datos.append(event.publicID())
                    datos.append(estacion[0])
                    datos.append(coord["latitude"])
                    datos.append(coord["longitude"])

                    try:
                        datos.append(chan[0])
                        datos.append(chan[1])
                        datos.append(chan[2])
                        datos.append(max(chan))
                    except Exception as err:
                        archivo = open(rutaLogPGA, "a")
                        archivo.write(str(core.Time.GMT()))
                        archivo.write(
                            "--WARNING---------Fail in channels for station %s \n" % estacion[0])
                        archivo.close()
                        print(f"Faltan canales para procesar la estación  {err}")
                    else:
                        datos.append(rutaArchivo)
                        matriz.append(datos)
                        archivo = open(rutaLogPGA, "a")
                        archivo.write(str(core.Time.GMT()))
                        archivo.write(
                            "--EXITO---------Data processed for station %s \n" % estacion[0])
                        archivo.close()
                        print("Datos procesados para la estación  %s \n" % estacion[0])
            else:
                print("NO ENCONTRE EL ARCHIVO")
        print("\nEvento procesado")
        archivo = open(rutaLogPGA, "a")
        archivo.write(str(core.Time.GMT()))
        archivo.write(
            "--EXITO---------PGA procesado para evento  %s \n" % event.publicID())
        archivo.close()
        contadorfin= UTCDateTime(core.Time.GMT())
        contador = contadorfin-contador
        print("Tiempo calculando PGA (s): %s" %contador)
        return matriz

    def conection(self, datos):

        conn = pymysql.connect(  # conexión casa Stuart
            host='localhost',
            user='stuart',
            password='jspz2383',
            db='seiscomp7',
            charset='utf8mb4',
            cursorclass=pymysql.cursors.DictCursor
        )
        """
        conn = pymysql.connect(  #conexion compu lis
            host='localhost',
            user='stuart',
            password='jspz2383',
            db='tabla_pga',
            charset='utf8mb4',
            cursorclass=pymysql.cursors.DictCursor
        )
        """

        try:
            with (conn.cursor() as cursor):
                # Create a new record
                sql = (
                    "INSERT INTO `Pga` (`fecha_evento`,`fecha_calculo`,`nombre_evento`,`estacion`, `latitud`, `longitud`, `hne_pga`, `hnn_pga`, `hnz_pga`,`maximo` ,`rutaWaveform`)"
                    " VALUES (%s ,%s ,%s ,%s ,%s ,%s ,%s, %s ,%s ,%s ,%s)")
                # print(values)
                cursor.executemany(sql, datos)

            # Commit changes
            conn.commit()
            archivo = open(rutaLogPGA, "a")
            archivo.write(str(core.Time.GMT()))
            archivo.write(
                "--EXITO---------Data save to Database %s \n" % datos[2])
            archivo.close()

            print("PGA guardado en la Base de Datos")
        finally:
            conn.close()





    def updateObject(self, parentID, scobject):
        # called if an updated object is received
        event = datamodel.Event.Cast(scobject)
        if event:
            print("Evento actualizado {}".format(event.publicID()))
            self.doSomethingWithEvent(event)

    def addObject(self, parentID, scobject):
        # called if a new object is received
        event = datamodel.Event.Cast(scobject)
        if event:
            print("Nuevo evento reportado {}".format(event.publicID()))
            self.doSomethingWithEvent(event)

    def run(self):
        # does not need to be reimplemented. it is just done to illustrate
        # how to override methods
        print("Hola! Estoy corriendo, esperando eventos.")
        return client.Application.run(self)


def main():
    app = EventListener(len(sys.argv), sys.argv)
    return app()


if __name__ == "__main__":
    sys.exit(main())
